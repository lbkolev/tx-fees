services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: tx_fees
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  redis:
    image: redis:6.2
    restart: unless-stopped
    container_name: redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis_data:/data

  # The app can run as a single monolith that does everything, but it can also be split into multiple
  # separate components that can be run independently.
  #
  #tx-fees:
  #  build: .
  #  container_name: tx_fees
  #  ports:
  #    - "8080:8080"
  #  depends_on:
  #    - postgres
  #    - redis
  #  env_file:
  #    - .envs
  #  environment:
  #    # optional, the program defaults to a public RPC provider
  #    #ETH_WS_RPC_URL: ..
  #  entrypoint: ["/app/tx-fees"]

  tx-fees_fee_tracker:
    build: .
    container_name: tx_fees_fee_tracker
    depends_on:
      - postgres
      - redis
    env_file:
      - .envs
    environment:
      COMPONENTS: fee-tracker
    entrypoint: ["/app/tx-fees"]

  tx-fees_job_executor:
    build: .
    container_name: tx_fees_job_executor
    depends_on:
      - postgres
      - redis
    env_file:
      - .envs
    environment:
      COMPONENTS: job-executor
    entrypoint: ["/app/tx-fees"]

  tx-fees_api_server:
    build: .
    container_name: tx_fees_api_server
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    env_file:
      - .envs
    environment:
      COMPONENTS: api
    entrypoint: ["/app/tx-fees"]

volumes:
  postgres_data:
  redis_data:
